{"remainingRequest":"/Users/lee/Desktop/github/mall-project/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--12-2!/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--18-0!/Users/lee/Desktop/github/mall-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lee/Desktop/github/mall-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-scoped-loader/index.js!/Users/lee/Desktop/github/mall-project/src/components/uParse/src/components/wxParseImg.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lee/Desktop/github/mall-project/src/components/uParse/src/components/wxParseImg.vue","mtime":1568127707220},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/cache-loader/dist/cjs.js","mtime":1554990705312},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1560261191357},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js","mtime":1563798331564},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js","mtime":1563798331564},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/cache-loader/dist/cjs.js","mtime":1554990705312},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/vue-loader/lib/index.js","mtime":1563798333387},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-scoped-loader/index.js","mtime":1563798331564}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default2 = {\n  name: \"wxParseImg\",\n  data: function data() {\n    return {\n      newStyleStr: \"\",\n      preview: true\n    };\n  },\n  props: {\n    node: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  inject: [\"uparse\"],\n  methods: {\n    wxParseImgTap: function wxParseImgTap(e) {\n      if (!this.preview) return;\n      var src = e.currentTarget.dataset.src;\n      if (!src) return;\n      this.uparse.preview(src, e);\n    },\n    // 图片视觉宽高计算函数区\n    wxParseImgLoad: function wxParseImgLoad(e) {\n      var src = e.currentTarget.dataset.src;\n      if (!src) return;\n      var _e$mp$detail = e.mp.detail,\n          width = _e$mp$detail.width,\n          height = _e$mp$detail.height;\n      var recal = this.wxAutoImageCal(width, height);\n      var imageheight = recal.imageheight,\n          imageWidth = recal.imageWidth;\n      var _this$node$attr = this.node.attr,\n          padding = _this$node$attr.padding,\n          mode = _this$node$attr.mode;\n      var styleStr = this.node.styleStr;\n      var imageHeightStyle = mode === \"widthFix\" ? \"\" : \"height: \".concat(imageheight, \"px;\");\n      this.newStyleStr = \"\".concat(styleStr, \"; \").concat(imageHeightStyle, \"; width: \").concat(imageWidth, \"px; padding: 0 \").concat(+padding, \"px;\");\n    },\n    // 计算视觉优先的图片宽高\n    wxAutoImageCal: function wxAutoImageCal(originalWidth, originalHeight) {\n      // 获取图片的原始长宽\n      var padding = this.node.attr.padding;\n      var windowWidth = this.node.$screen.width - 2 * padding;\n      var results = {};\n\n      if (originalWidth < 60 || originalHeight < 60) {\n        var src = this.node.attr.src;\n        this.uparse.removeImageUrl(src);\n        this.preview = false;\n      } // 判断按照那种方式进行缩放\n\n\n      if (originalWidth > windowWidth) {\n        // 在图片width大于手机屏幕width时候\n        results.imageWidth = windowWidth;\n        results.imageheight = windowWidth * (originalHeight / originalWidth);\n      } else {\n        // 否则展示原来的数据\n        results.imageWidth = originalWidth;\n        results.imageheight = originalHeight;\n      }\n\n      return results;\n    }\n  }\n};\nexports.default = _default2;",{"version":3,"sources":["wxParseImg.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;gBAgBA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,EADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAAA;AAIA,GAPA;AAQA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA,EAAA;AACA;AAJA;AADA,GARA;AAgBA,EAAA,MAAA,EAAA,CAAA,QAAA,CAhBA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,yBACA,CADA,EACA;AACA,UAAA,CAAA,KAAA,OAAA,EAAA;AADA,UAEA,GAFA,GAEA,CAAA,CAAA,aAAA,CAAA,OAFA,CAEA,GAFA;AAGA,UAAA,CAAA,GAAA,EAAA;AACA,WAAA,MAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA;AACA,KANA;AAOA;AACA,IAAA,cARA,0BAQA,CARA,EAQA;AAAA,UACA,GADA,GACA,CAAA,CAAA,aAAA,CAAA,OADA,CACA,GADA;AAEA,UAAA,CAAA,GAAA,EAAA;AAFA,yBAGA,CAAA,CAAA,EAAA,CAAA,MAHA;AAAA,UAGA,KAHA,gBAGA,KAHA;AAAA,UAGA,MAHA,gBAGA,MAHA;AAIA,UAAA,KAAA,GAAA,KAAA,cAAA,CAAA,KAAA,EAAA,MAAA,CAAA;AAJA,UAKA,WALA,GAKA,KALA,CAKA,WALA;AAAA,UAKA,UALA,GAKA,KALA,CAKA,UALA;AAAA,4BAMA,KAAA,IAAA,CAAA,IANA;AAAA,UAMA,OANA,mBAMA,OANA;AAAA,UAMA,IANA,mBAMA,IANA;AAAA,UAOA,QAPA,GAOA,KAAA,IAPA,CAOA,QAPA;AAQA,UAAA,gBAAA,GACA,IAAA,KAAA,UAAA,GAAA,EAAA,qBAAA,WAAA,QADA;AAEA,WAAA,WAAA,aAAA,QAAA,eAAA,gBAAA,sBAAA,UAAA,4BAAA,CAAA,OAAA;AACA,KAnBA;AAoBA;AACA,IAAA,cArBA,0BAqBA,aArBA,EAqBA,cArBA,EAqBA;AACA;AADA,UAEA,OAFA,GAEA,KAAA,IAAA,CAAA,IAFA,CAEA,OAFA;AAGA,UAAA,WAAA,GAAA,KAAA,IAAA,CAAA,OAAA,CAAA,KAAA,GAAA,IAAA,OAAA;AACA,UAAA,OAAA,GAAA,EAAA;;AAEA,UAAA,aAAA,GAAA,EAAA,IAAA,cAAA,GAAA,EAAA,EAAA;AAAA,YACA,GADA,GACA,KAAA,IAAA,CAAA,IADA,CACA,GADA;AAEA,aAAA,MAAA,CAAA,cAAA,CAAA,GAAA;AACA,aAAA,OAAA,GAAA,KAAA;AACA,OAVA,CAYA;;;AACA,UAAA,aAAA,GAAA,WAAA,EAAA;AACA;AACA,QAAA,OAAA,CAAA,UAAA,GAAA,WAAA;AACA,QAAA,OAAA,CAAA,WAAA,GAAA,WAAA,IAAA,cAAA,GAAA,aAAA,CAAA;AACA,OAJA,MAIA;AACA;AACA,QAAA,OAAA,CAAA,UAAA,GAAA,aAAA;AACA,QAAA,OAAA,CAAA,WAAA,GAAA,cAAA;AACA;;AAEA,aAAA,OAAA;AACA;AA7CA;AAjBA,C","sourcesContent":["<template>\n\t<view :style=\"newStyleStr || node.styleStr\">\n\t\t<image\n\t\t\t:mode=\"node.attr.mode\"\n\t\t\t:lazy-load=\"node.attr.lazyLoad\"\n\t\t\t:class=\"node.classStr\"\n\t\t\t:style=\"newStyleStr || node.styleStr\"\n\t\t\t:data-src=\"node.attr.src\"\n\t\t\t:src=\"node.attr.src\"\n\t\t\t@tap=\"wxParseImgTap\"\n\t\t\t@load=\"wxParseImgLoad\"\n\t\t/>\n\t</view>\n</template>\n\n<script>\nexport default {\n\tname: \"wxParseImg\",\n\tdata() {\n\t\treturn {\n\t\t\tnewStyleStr: \"\",\n\t\t\tpreview: true\n\t\t};\n\t},\n\tprops: {\n\t\tnode: {\n\t\t\ttype: Object,\n\t\t\tdefault() {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t},\n\tinject: [\"uparse\"],\n\tmethods: {\n\t\twxParseImgTap(e) {\n\t\t\tif (!this.preview) return;\n\t\t\tconst { src } = e.currentTarget.dataset;\n\t\t\tif (!src) return;\n\t\t\tthis.uparse.preview(src, e);\n\t\t},\n\t\t// 图片视觉宽高计算函数区\n\t\twxParseImgLoad(e) {\n\t\t\tconst { src } = e.currentTarget.dataset;\n\t\t\tif (!src) return;\n\t\t\tconst { width, height } = e.mp.detail;\n\t\t\tconst recal = this.wxAutoImageCal(width, height);\n\t\t\tconst { imageheight, imageWidth } = recal;\n\t\t\tconst { padding, mode } = this.node.attr;\n\t\t\tconst { styleStr } = this.node;\n\t\t\tconst imageHeightStyle =\n\t\t\t\tmode === \"widthFix\" ? \"\" : `height: ${imageheight}px;`;\n\t\t\tthis.newStyleStr = `${styleStr}; ${imageHeightStyle}; width: ${imageWidth}px; padding: 0 ${+padding}px;`;\n\t\t},\n\t\t// 计算视觉优先的图片宽高\n\t\twxAutoImageCal(originalWidth, originalHeight) {\n\t\t\t// 获取图片的原始长宽\n\t\t\tconst { padding } = this.node.attr;\n\t\t\tconst windowWidth = this.node.$screen.width - 2 * padding;\n\t\t\tconst results = {};\n\n\t\t\tif (originalWidth < 60 || originalHeight < 60) {\n\t\t\t\tconst { src } = this.node.attr;\n\t\t\t\tthis.uparse.removeImageUrl(src);\n\t\t\t\tthis.preview = false;\n\t\t\t}\n\n\t\t\t// 判断按照那种方式进行缩放\n\t\t\tif (originalWidth > windowWidth) {\n\t\t\t\t// 在图片width大于手机屏幕width时候\n\t\t\t\tresults.imageWidth = windowWidth;\n\t\t\t\tresults.imageheight = windowWidth * (originalHeight / originalWidth);\n\t\t\t} else {\n\t\t\t\t// 否则展示原来的数据\n\t\t\t\tresults.imageWidth = originalWidth;\n\t\t\t\tresults.imageheight = originalHeight;\n\t\t\t}\n\n\t\t\treturn results;\n\t\t}\n\t}\n};\n</script>\n"],"sourceRoot":"src/components/uParse/src/components"}]}