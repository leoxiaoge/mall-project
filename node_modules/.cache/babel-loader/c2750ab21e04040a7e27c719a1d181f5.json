{"remainingRequest":"/Users/lee/Desktop/github/mall-project/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--12-2!/Users/lee/Desktop/github/mall-project/src/components/uParse/src/libs/htmlparser.js","dependencies":[{"path":"/Users/lee/Desktop/github/mall-project/src/components/uParse/src/libs/htmlparser.js","mtime":1560269787879},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/cache-loader/dist/cjs.js","mtime":1554990705312},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1560261191357},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js","mtime":1560261190995}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n *\n * htmlParser改造自: https://github.com/blowsie/Pure-JavaScript-HTML5-Parser\n *\n * author: Di (微信小程序开发工程师)\n * organization: WeAppDev(微信小程序开发论坛)(http://weappdev.com)\n *               垂直微信小程序开发交流社区\n *\n * github地址: https://github.com/icindy/wxParse\n *\n * for: 微信小程序富文本解析\n * detail : http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\n */\n// Regular Expressions for parsing tags and attributes\nvar startTag = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z0-9_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\nvar endTag = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\nvar attr = /([a-zA-Z0-9_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n\nfunction makeMap(str) {\n  var obj = {};\n  var items = str.split(',');\n\n  for (var i = 0; i < items.length; i += 1) {\n    obj[items[i]] = true;\n  }\n\n  return obj;\n} // Empty Elements - HTML 5\n\n\nvar empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr'); // Block Elements - HTML 5\n\nvar block = makeMap('address,code,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video'); // Inline Elements - HTML 5\n\nvar inline = makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var'); // Elements that you can, intentionally, leave open\n// (and which close themselves)\n\nvar closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr'); // Attributes that have their values filled in disabled=\"disabled\"\n\nvar fillAttrs = makeMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected');\n\nfunction HTMLParser(html, handler) {\n  var index;\n  var chars;\n  var match;\n  var last = html;\n  var stack = [];\n\n  stack.last = function () {\n    return stack[stack.length - 1];\n  };\n\n  function parseEndTag(tag, tagName) {\n    // If no tag name is provided, clean shop\n    var pos;\n\n    if (!tagName) {\n      pos = 0;\n    } else {\n      // Find the closest opened tag of the same type\n      tagName = tagName.toLowerCase();\n\n      for (pos = stack.length - 1; pos >= 0; pos -= 1) {\n        if (stack[pos] === tagName) break;\n      }\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i -= 1) {\n        if (handler.end) handler.end(stack[i]);\n      } // Remove the open elements from the stack\n\n\n      stack.length = pos;\n    }\n  }\n\n  function parseStartTag(tag, tagName, rest, unary) {\n    tagName = tagName.toLowerCase();\n\n    if (block[tagName]) {\n      while (stack.last() && inline[stack.last()]) {\n        parseEndTag('', stack.last());\n      }\n    }\n\n    if (closeSelf[tagName] && stack.last() === tagName) {\n      parseEndTag('', tagName);\n    }\n\n    unary = empty[tagName] || !!unary;\n    if (!unary) stack.push(tagName);\n\n    if (handler.start) {\n      var attrs = [];\n      rest.replace(attr, function genAttr(matches, name) {\n        var value = arguments[2] || arguments[3] || arguments[4] || (fillAttrs[name] ? name : '');\n        attrs.push({\n          name: name,\n          value: value,\n          escaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\"') // \"\n\n        });\n      });\n\n      if (handler.start) {\n        handler.start(tagName, attrs, unary);\n      }\n    }\n  }\n\n  while (html) {\n    chars = true;\n\n    if (html.indexOf('</') === 0) {\n      match = html.match(endTag);\n\n      if (match) {\n        html = html.substring(match[0].length);\n        match[0].replace(endTag, parseEndTag);\n        chars = false;\n      } // start tag\n\n    } else if (html.indexOf('<') === 0) {\n      match = html.match(startTag);\n\n      if (match) {\n        html = html.substring(match[0].length);\n        match[0].replace(startTag, parseStartTag);\n        chars = false;\n      }\n    }\n\n    if (chars) {\n      index = html.indexOf('<');\n      var text = '';\n\n      while (index === 0) {\n        text += '<';\n        html = html.substring(1);\n        index = html.indexOf('<');\n      }\n\n      text += index < 0 ? html : html.substring(0, index);\n      html = index < 0 ? '' : html.substring(index);\n      if (handler.chars) handler.chars(text);\n    }\n\n    if (html === last) throw new Error(\"Parse Error: \".concat(html));\n    last = html;\n  } // Clean up any remaining tags\n\n\n  parseEndTag();\n}\n\nvar _default = HTMLParser;\nexports.default = _default;",{"version":3,"sources":["/Users/lee/Desktop/github/mall-project/src/components/uParse/src/libs/htmlparser.js"],"names":["startTag","endTag","attr","makeMap","str","obj","items","split","i","length","empty","block","inline","closeSelf","fillAttrs","HTMLParser","html","handler","index","chars","match","last","stack","parseEndTag","tag","tagName","pos","toLowerCase","end","parseStartTag","rest","unary","push","start","attrs","replace","genAttr","matches","name","value","arguments","escaped","indexOf","substring","text","Error"],"mappings":"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","sourcesContent":["/**\n *\n * htmlParser改造自: https://github.com/blowsie/Pure-JavaScript-HTML5-Parser\n *\n * author: Di (微信小程序开发工程师)\n * organization: WeAppDev(微信小程序开发论坛)(http://weappdev.com)\n *               垂直微信小程序开发交流社区\n *\n * github地址: https://github.com/icindy/wxParse\n *\n * for: 微信小程序富文本解析\n * detail : http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\n */\n// Regular Expressions for parsing tags and attributes\n\nconst startTag = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z0-9_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\nconst endTag = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\nconst attr = /([a-zA-Z0-9_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n\nfunction makeMap(str) {\n  const obj = {};\n  const items = str.split(',');\n  for (let i = 0; i < items.length; i += 1) obj[items[i]] = true;\n  return obj;\n}\n\n// Empty Elements - HTML 5\nconst empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr');\n\n// Block Elements - HTML 5\nconst block = makeMap('address,code,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video');\n\n// Inline Elements - HTML 5\nconst inline = makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var');\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nconst closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');\n\n// Attributes that have their values filled in disabled=\"disabled\"\nconst fillAttrs = makeMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected');\n\nfunction HTMLParser(html, handler) {\n  let index;\n  let chars;\n  let match;\n  let last = html;\n  const stack = [];\n\n  stack.last = () => stack[stack.length - 1];\n\n  function parseEndTag(tag, tagName) {\n    // If no tag name is provided, clean shop\n    let pos;\n    if (!tagName) {\n      pos = 0;\n    } else {\n      // Find the closest opened tag of the same type\n      tagName = tagName.toLowerCase();\n      for (pos = stack.length - 1; pos >= 0; pos -= 1) {\n        if (stack[pos] === tagName) break;\n      }\n    }\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (let i = stack.length - 1; i >= pos; i -= 1) {\n        if (handler.end) handler.end(stack[i]);\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n    }\n  }\n\n  function parseStartTag(tag, tagName, rest, unary) {\n    tagName = tagName.toLowerCase();\n\n    if (block[tagName]) {\n      while (stack.last() && inline[stack.last()]) {\n        parseEndTag('', stack.last());\n      }\n    }\n\n    if (closeSelf[tagName] && stack.last() === tagName) {\n      parseEndTag('', tagName);\n    }\n\n    unary = empty[tagName] || !!unary;\n\n    if (!unary) stack.push(tagName);\n\n    if (handler.start) {\n      const attrs = [];\n\n      rest.replace(attr, function genAttr(matches, name) {\n        const value = arguments[2] || arguments[3] || arguments[4] || (fillAttrs[name] ? name : '');\n\n        attrs.push({\n          name,\n          value,\n          escaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\"'), // \"\n        });\n      });\n\n      if (handler.start) {\n        handler.start(tagName, attrs, unary);\n      }\n    }\n  }\n\n  while (html) {\n    chars = true;\n\n    if (html.indexOf('</') === 0) {\n      match = html.match(endTag);\n\n      if (match) {\n        html = html.substring(match[0].length);\n        match[0].replace(endTag, parseEndTag);\n        chars = false;\n      }\n\n      // start tag\n    } else if (html.indexOf('<') === 0) {\n      match = html.match(startTag);\n\n      if (match) {\n        html = html.substring(match[0].length);\n        match[0].replace(startTag, parseStartTag);\n        chars = false;\n      }\n    }\n\n    if (chars) {\n      index = html.indexOf('<');\n      let text = '';\n      while (index === 0) {\n        text += '<';\n        html = html.substring(1);\n        index = html.indexOf('<');\n      }\n      text += index < 0 ? html : html.substring(0, index);\n      html = index < 0 ? '' : html.substring(index);\n\n      if (handler.chars) handler.chars(text);\n    }\n\n    if (html === last) throw new Error(`Parse Error: ${html}`);\n    last = html;\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n}\n\nexport default HTMLParser;\n"]}]}