{"remainingRequest":"/Users/lee/Desktop/github/mall-project/node_modules/babel-loader/lib/index.js!/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--12-2!/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--18-0!/Users/lee/Desktop/github/mall-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lee/Desktop/github/mall-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-scoped-loader/index.js!/Users/lee/Desktop/github/mall-project/src/pages/test/dome.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lee/Desktop/github/mall-project/src/pages/test/dome.vue","mtime":1561989147203},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/cache-loader/dist/cjs.js","mtime":1554990705312},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/babel-loader/lib/index.js","mtime":1560261191357},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js","mtime":1561751947145},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js","mtime":1561751947145},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/cache-loader/dist/cjs.js","mtime":1554990705312},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/vue-loader/lib/index.js","mtime":1554990705750},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-scoped-loader/index.js","mtime":1561751947145}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _mescrollBeibei = _interopRequireDefault(require(\"@/components/mescroll-diy/mescroll-beibei.vue\"));\n\nvar _pdList = _interopRequireDefault(require(\"@/components/other/pd-list.vue\"));\n\nvar _pdlist = _interopRequireDefault(require(\"@/common/pdlist.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 自定义的mescroll-beibei.vue\n// 模拟数据\nvar _default = {\n  components: {\n    MescrollUni: _mescrollBeibei.default,\n    PdList: _pdList.default\n  },\n  data: function data() {\n    return {\n      pdList: [] // 数据列表\n\n    };\n  },\n  methods: {\n    /*下拉刷新的回调 */\n    downCallback: function downCallback(mescroll) {\n      // 这里加载你想下拉刷新的数据, 比如刷新轮播数据\n      // loadSwiper();\n      // 下拉刷新的回调,默认重置上拉加载列表为第一页 (自动执行 mescroll.num=1, 再触发upCallback方法 )\n      mescroll.resetUpScroll();\n    },\n\n    /*上拉加载的回调: mescroll携带page的参数, 其中num:当前页 从1开始, size:每页数据条数,默认10 */\n    upCallback: function upCallback(mescroll) {\n      var _this = this;\n\n      //联网加载数据\n      this.getListDataFromNet(mescroll.num, mescroll.size, function (curPageData) {\n        //联网成功的回调,隐藏下拉刷新和上拉加载的状态;\n        console.log(\"mescroll.num=\" + mescroll.num + \", mescroll.size=\" + mescroll.size + \", curPageData.length=\" + curPageData.length);\n        mescroll.endSuccess(curPageData.length); //设置列表数据\n\n        if (mescroll.num == 1) _this.pdList = []; //如果是第一页需手动制空列表\n\n        _this.pdList = _this.pdList.concat(curPageData); //追加新数据\n      }, function () {\n        //联网失败的回调,隐藏下拉刷新的状态\n        mescroll.endErr();\n      });\n    },\n\n    /*联网加载列表数据\n    在您的实际项目中,请参考官方写法: http://www.mescroll.com/uni.html#tagUpCallback\n    请忽略getListDataFromNet的逻辑,这里仅仅是在本地模拟分页数据,本地演示用\n    实际项目以您服务器接口返回的数据为准,无需本地处理分页.\n    * */\n    getListDataFromNet: function getListDataFromNet(pageNum, pageSize, successCallback, errorCallback) {\n      //延时一秒,模拟联网\n      setTimeout(function () {\n        try {\n          //模拟分页数据\n          var listData = [];\n\n          for (var i = (pageNum - 1) * pageSize; i < pageNum * pageSize; i++) {\n            if (i == _pdlist.default.length) break;\n            listData.push(_pdlist.default[i]);\n          } //联网成功的回调\n\n\n          successCallback && successCallback(listData);\n        } catch (e) {\n          //联网失败的回调\n          errorCallback && errorCallback();\n        }\n      }, 1000);\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["dome.vue"],"names":[],"mappings":";;;;;;;AAWA;;AACA;;AAEA;;;;;;;;;;;;;AAJA;AAGA;eAGA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,WAAA,EAAA,uBADA;AAEA,IAAA,MAAA,EAAA;AAFA,GADA;AAKA,EAAA,IALA,kBAKA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,EADA,CACA;;AADA,KAAA;AAGA,GATA;AAUA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,YAFA,wBAEA,QAFA,EAEA;AACA;AACA;AACA;AACA,MAAA,QAAA,CAAA,aAAA;AACA,KAPA;;AAQA;AACA,IAAA,UATA,sBASA,QATA,EASA;AAAA;;AACA;AACA,WAAA,kBAAA,CAAA,QAAA,CAAA,GAAA,EAAA,QAAA,CAAA,IAAA,EAAA,UAAA,WAAA,EAAA;AACA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,kBAAA,QAAA,CAAA,GAAA,GAAA,kBAAA,GAAA,QAAA,CAAA,IAAA,GAAA,uBAAA,GAAA,WAAA,CAAA,MAAA;AACA,QAAA,QAAA,CAAA,UAAA,CAAA,WAAA,CAAA,MAAA,EAHA,CAKA;;AACA,YAAA,QAAA,CAAA,GAAA,IAAA,CAAA,EAAA,KAAA,CAAA,MAAA,GAAA,EAAA,CANA,CAMA;;AACA,QAAA,KAAA,CAAA,MAAA,GAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,WAAA,CAAA,CAPA,CAOA;AACA,OARA,EAQA,YAAA;AACA;AACA,QAAA,QAAA,CAAA,MAAA;AACA,OAXA;AAYA,KAvBA;;AAwBA;;;;;AAKA,IAAA,kBA7BA,8BA6BA,OA7BA,EA6BA,QA7BA,EA6BA,eA7BA,EA6BA,aA7BA,EA6BA;AACA;AACA,MAAA,UAAA,CAAA,YAAA;AACA,YAAA;AACA;AACA,cAAA,QAAA,GAAA,EAAA;;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,OAAA,GAAA,CAAA,IAAA,QAAA,EAAA,CAAA,GAAA,OAAA,GAAA,QAAA,EAAA,CAAA,EAAA,EAAA;AACA,gBAAA,CAAA,IAAA,gBAAA,MAAA,EAAA;AACA,YAAA,QAAA,CAAA,IAAA,CAAA,gBAAA,CAAA,CAAA;AACA,WANA,CAOA;;;AACA,UAAA,eAAA,IAAA,eAAA,CAAA,QAAA,CAAA;AACA,SATA,CASA,OAAA,CAAA,EAAA;AACA;AACA,UAAA,aAAA,IAAA,aAAA,EAAA;AACA;AACA,OAdA,EAcA,IAdA,CAAA;AAeA;AA9CA;AAVA,C","sourcesContent":["<template>\r\n\t<view>\r\n\t\t<mescroll-uni top=\"0\" bottom=\"0\" @down=\"downCallback\" @up=\"upCallback\">\r\n\t\t\t<!-- 分页的数据列表 -->\r\n\t\t\t<pd-list :list=\"pdList\"></pd-list>\r\n\t\t</mescroll-uni>\r\n\t</view>\r\n</template>\r\n\r\n<script>\r\n\t// 自定义的mescroll-beibei.vue\r\n\timport MescrollUni from \"@/components/mescroll-diy/mescroll-beibei.vue\";\r\n\timport PdList from \"@/components/other/pd-list.vue\";\r\n\t// 模拟数据\r\n\timport mockData from \"@/common/pdlist.js\";\r\n\t\r\n\texport default {\r\n\t\tcomponents: {\r\n\t\t\tMescrollUni,\r\n\t\t\tPdList\r\n\t\t},\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tpdList: [] // 数据列表\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\t/*下拉刷新的回调 */\r\n\t\t\tdownCallback(mescroll) {\r\n\t\t\t\t// 这里加载你想下拉刷新的数据, 比如刷新轮播数据\r\n\t\t\t\t// loadSwiper();\r\n\t\t\t\t// 下拉刷新的回调,默认重置上拉加载列表为第一页 (自动执行 mescroll.num=1, 再触发upCallback方法 )\r\n\t\t\t\tmescroll.resetUpScroll()\r\n\t\t\t},\r\n\t\t\t/*上拉加载的回调: mescroll携带page的参数, 其中num:当前页 从1开始, size:每页数据条数,默认10 */\r\n\t\t\tupCallback(mescroll) {\r\n\t\t\t\t//联网加载数据\r\n\t\t\t\tthis.getListDataFromNet(mescroll.num, mescroll.size, (curPageData)=>{\r\n\t\t\t\t\t//联网成功的回调,隐藏下拉刷新和上拉加载的状态;\r\n\t\t\t\t\tconsole.log(\"mescroll.num=\" + mescroll.num + \", mescroll.size=\" + mescroll.size + \", curPageData.length=\" + curPageData.length);\r\n\t\t\t\t\tmescroll.endSuccess(curPageData.length);\r\n\r\n\t\t\t\t\t//设置列表数据\r\n\t\t\t\t\tif(mescroll.num == 1) this.pdList = []; //如果是第一页需手动制空列表\r\n\t\t\t\t\tthis.pdList=this.pdList.concat(curPageData); //追加新数据\r\n\t\t\t\t}, () => {\r\n\t\t\t\t\t//联网失败的回调,隐藏下拉刷新的状态\r\n\t\t\t\t\tmescroll.endErr();\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t/*联网加载列表数据\r\n\t\t\t在您的实际项目中,请参考官方写法: http://www.mescroll.com/uni.html#tagUpCallback\r\n\t\t\t请忽略getListDataFromNet的逻辑,这里仅仅是在本地模拟分页数据,本地演示用\r\n\t\t\t实际项目以您服务器接口返回的数据为准,无需本地处理分页.\r\n\t\t\t* */\r\n\t\t\tgetListDataFromNet(pageNum,pageSize,successCallback,errorCallback) {\r\n\t\t\t\t//延时一秒,模拟联网\r\n\t\t\t\tsetTimeout(()=> {\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\t//模拟分页数据\r\n\t\t\t\t\t\tlet listData=[];\r\n\t\t\t\t\t\tfor (let i = (pageNum-1)*pageSize; i < pageNum*pageSize; i++) {\r\n\t\t\t\t\t\t\tif(i==mockData.length) break;\r\n\t\t\t\t\t\t\tlistData.push(mockData[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//联网成功的回调\r\n\t\t\t\t\t\tsuccessCallback && successCallback(listData);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t//联网失败的回调\r\n\t\t\t\t\t\terrorCallback && errorCallback();\r\n\t\t\t\t\t}\r\n\t\t\t\t},1000)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\timage{width: 100%;}\r\n\t.header{z-index: 9900;position: fixed;top: --window-top;left: 0;height: 180upx;background: white;}\r\n\t.footer{z-index: 9900;position: fixed;bottom: 0;left: 0;height: 100upx;background: white;}\r\n</style>\r\n"],"sourceRoot":"src/pages/test"}]}