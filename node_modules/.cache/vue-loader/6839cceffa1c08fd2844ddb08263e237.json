{"remainingRequest":"/Users/lee/Desktop/github/mall-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-scoped-loader/index.js!/Users/lee/Desktop/github/mall-project/src/components/gaoyia-parse/components/wxParseImg.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lee/Desktop/github/mall-project/src/components/gaoyia-parse/components/wxParseImg.vue","mtime":1568125935174},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/cache-loader/dist/cjs.js","mtime":1554990705312},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/babel-loader/lib/index.js","mtime":1560261191357},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js","mtime":1563798331564},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js","mtime":1563798331564},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/cache-loader/dist/cjs.js","mtime":1554990705312},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/vue-loader/lib/index.js","mtime":1563798333387},{"path":"/Users/lee/Desktop/github/mall-project/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-scoped-loader/index.js","mtime":1563798331564}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n\tname: 'wxParseImg',\n\tdata() {\n\t\treturn {\n\t\t\tnewStyleStr: '',\n\t\t\tpreview: true\n\t\t};\n\t},\n\tinject: ['parseWidth'],\n\tmounted() {},\n\tprops: {\n\t\tnode: {\n\t\t\ttype: Object,\n\t\t\tdefault() {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t},\n\t\n\tmethods: {\n\t\twxParseImgTap(e) {\n\t\t\tif (!this.preview) return;\n\t\t\tconst { src } = e.currentTarget.dataset;\n\t\t\tif (!src) return;\n\t\t\tlet parent = this.$parent;\n\t\t\twhile (!parent.preview || typeof parent.preview !== 'function') {\n\t\t\t\t// TODO 遍历获取父节点执行方法\n\t\t\t\tparent = parent.$parent;\n\t\t\t}\n\t\t\tparent.preview(src, e);\n\t\t},\n\t\t// 图片视觉宽高计算函数区\n\t\twxParseImgLoad(e) {\n\t\t\tconst { src } = e.currentTarget.dataset;\n\t\t\tif (!src) return;\n\t\t\tlet { width, height } = e.mp.detail;\n\n\t\t\tconst recal = this.wxAutoImageCal(width, height);\n\n\t\t\tconst { imageheight, imageWidth } = recal;\n\t\t\tconst { padding, mode } = this.node.attr;//删除padding\n\t\t\t// const { mode } = this.node.attr;\n\n\t\t\tconst { styleStr } = this.node;\n\t\t\tconst imageHeightStyle = mode === 'widthFix' ? '' : `height: ${imageheight}px;`;\n\n\t\t\tthis.newStyleStr = `${styleStr}; ${imageHeightStyle}; width: ${imageWidth}px; padding: 0 ${+padding}px;`;//删除padding\n\t\t\t// this.newStyleStr = `${styleStr}; ${imageHeightStyle}; width: ${imageWidth}px;`;\n\t\t},\n\t\t// 计算视觉优先的图片宽高\n\t\twxAutoImageCal(originalWidth, originalHeight) {\n\t\t\t// 获取图片的原始长宽\n\t\t\tconst windowWidth = this.parseWidth.value;\n\t\t\tconst results = {};\n\n\t\t\tif (originalWidth < 60 || originalHeight < 60) {\n\t\t\t\tconst { src } = this.node.attr;\n\t\t\t\tlet parent = this.$parent;\n\t\t\t\twhile (!parent.preview || typeof parent.preview !== 'function') {\n\t\t\t\t\tparent = parent.$parent;\n\t\t\t\t}\n\t\t\t\tparent.removeImageUrl(src);\n\t\t\t\tthis.preview = false;\n\t\t\t}\n\n\t\t\t// 判断按照那种方式进行缩放\n\t\t\tif (originalWidth > windowWidth) {\n\t\t\t\t// 在图片width大于手机屏幕width时候\n\t\t\t\tresults.imageWidth = windowWidth;\n\t\t\t\tresults.imageheight = windowWidth * (originalHeight / originalWidth);\n\t\t\t} else {\n\t\t\t\t// 否则展示原来的数据\n\t\t\t\tresults.imageWidth = originalWidth;\n\t\t\t\tresults.imageheight = originalHeight;\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\t}\n};\n",{"version":3,"sources":["wxParseImg.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"wxParseImg.vue","sourceRoot":"src/components/gaoyia-parse/components","sourcesContent":["<template>\n\t<image\n\t\t:mode=\"node.attr.mode\"\n\t\t:lazy-load=\"node.attr.lazyLoad\"\n\t\t:class=\"node.classStr\"\n\t\t:style=\"newStyleStr || node.styleStr\"\n\t\t:data-src=\"node.attr.src\"\n\t\t:src=\"node.attr.src\"\n\t\t@tap=\"wxParseImgTap\"\n\t\t@load=\"wxParseImgLoad\"\n\t/>\n</template>\n\n<script>\nexport default {\n\tname: 'wxParseImg',\n\tdata() {\n\t\treturn {\n\t\t\tnewStyleStr: '',\n\t\t\tpreview: true\n\t\t};\n\t},\n\tinject: ['parseWidth'],\n\tmounted() {},\n\tprops: {\n\t\tnode: {\n\t\t\ttype: Object,\n\t\t\tdefault() {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t},\n\t\n\tmethods: {\n\t\twxParseImgTap(e) {\n\t\t\tif (!this.preview) return;\n\t\t\tconst { src } = e.currentTarget.dataset;\n\t\t\tif (!src) return;\n\t\t\tlet parent = this.$parent;\n\t\t\twhile (!parent.preview || typeof parent.preview !== 'function') {\n\t\t\t\t// TODO 遍历获取父节点执行方法\n\t\t\t\tparent = parent.$parent;\n\t\t\t}\n\t\t\tparent.preview(src, e);\n\t\t},\n\t\t// 图片视觉宽高计算函数区\n\t\twxParseImgLoad(e) {\n\t\t\tconst { src } = e.currentTarget.dataset;\n\t\t\tif (!src) return;\n\t\t\tlet { width, height } = e.mp.detail;\n\n\t\t\tconst recal = this.wxAutoImageCal(width, height);\n\n\t\t\tconst { imageheight, imageWidth } = recal;\n\t\t\tconst { padding, mode } = this.node.attr;//删除padding\n\t\t\t// const { mode } = this.node.attr;\n\n\t\t\tconst { styleStr } = this.node;\n\t\t\tconst imageHeightStyle = mode === 'widthFix' ? '' : `height: ${imageheight}px;`;\n\n\t\t\tthis.newStyleStr = `${styleStr}; ${imageHeightStyle}; width: ${imageWidth}px; padding: 0 ${+padding}px;`;//删除padding\n\t\t\t// this.newStyleStr = `${styleStr}; ${imageHeightStyle}; width: ${imageWidth}px;`;\n\t\t},\n\t\t// 计算视觉优先的图片宽高\n\t\twxAutoImageCal(originalWidth, originalHeight) {\n\t\t\t// 获取图片的原始长宽\n\t\t\tconst windowWidth = this.parseWidth.value;\n\t\t\tconst results = {};\n\n\t\t\tif (originalWidth < 60 || originalHeight < 60) {\n\t\t\t\tconst { src } = this.node.attr;\n\t\t\t\tlet parent = this.$parent;\n\t\t\t\twhile (!parent.preview || typeof parent.preview !== 'function') {\n\t\t\t\t\tparent = parent.$parent;\n\t\t\t\t}\n\t\t\t\tparent.removeImageUrl(src);\n\t\t\t\tthis.preview = false;\n\t\t\t}\n\n\t\t\t// 判断按照那种方式进行缩放\n\t\t\tif (originalWidth > windowWidth) {\n\t\t\t\t// 在图片width大于手机屏幕width时候\n\t\t\t\tresults.imageWidth = windowWidth;\n\t\t\t\tresults.imageheight = windowWidth * (originalHeight / originalWidth);\n\t\t\t} else {\n\t\t\t\t// 否则展示原来的数据\n\t\t\t\tresults.imageWidth = originalWidth;\n\t\t\t\tresults.imageheight = originalHeight;\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\t}\n};\n</script>\n"]}]}