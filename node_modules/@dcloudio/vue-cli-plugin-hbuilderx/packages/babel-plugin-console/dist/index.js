const METHODS = ['error', 'warn', 'info', 'log', 'debug']
module.exports = function() {
    return {
        visitor: {
            CallExpression(path, state) {

                const opts = state.opts

                if (path.node.callee.object &&
                    path.node.callee.object.name === 'console' &&
                    METHODS.includes(path.node.callee.property.name)) {
                    if (path.node.callee.property.name === 'debug') { //console.debug=>console.log
                        path.node.callee.property.name = 'log'
                    }

                    let file = state.file.opts.filename
                    if (file) {
                        if (opts && opts.file) {
                            file = opts.file(file)
                        }
                        if (file) {
                            const lastArg = path.node.arguments[path.node.arguments.length - 1]
                            if (
                                lastArg &&
                                lastArg.type === 'StringLiteral' &&
                                lastArg.value.indexOf(' at ') === 0
                            ) {
                                return
                            }
                            path.node.arguments.push({
                                type: 'StringLiteral',
                                value: ` at ${file}:${path.node.loc.start.line}`
                            })
                        }
                    }
                }

            }
        }
    }
}
