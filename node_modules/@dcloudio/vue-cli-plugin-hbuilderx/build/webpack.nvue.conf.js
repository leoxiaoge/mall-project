const path = require('path')
const webpack = require('webpack')
const VueLoaderPlugin = require('vue-loader/lib/plugin')

const {
  done
} = require('@vue/cli-shared-utils')

const {
  nvueJsPreprocessOptions,
  devtoolModuleFilenameTemplate
} = require('@dcloudio/uni-cli-shared')

const WebpackErrorsPlugin = require('@dcloudio/vue-cli-plugin-uni/packages/webpack-errors-plugin')

const onErrors = require('@dcloudio/vue-cli-plugin-uni/util/on-errors')

const cssLoaders = require('./css-loader.conf')
const vueLoaderOptions = require('./vue-loader.conf')

const jsPreprocessorLoader = {
  loader: '@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader',
  options: nvueJsPreprocessOptions
}

const uniPath = process.env.UNI_USING_V8
  ? '../packages/uni-app-plus-nvue-v8/dist/index.js'
  : '../packages/uni-app-plus-nvue/dist/index.js'

const provide = {
  'uni': [path.resolve(__dirname, uniPath), 'default']
}
if (process.env.UNI_USING_V8) {
  provide['plus'] = [path.resolve(__dirname, uniPath), 'weexPlus']
}
const plugins = [
  new VueLoaderPlugin(),
  new webpack.DefinePlugin({
    'process.env': {
      'NODE_ENV': JSON.stringify(process.env.NODE_ENV)
    }
  }),
  new webpack.BannerPlugin({
    banner: '"use weex:vue";',
    raw: true,
    exclude: 'Vue'
  }),
  new webpack.ProvidePlugin(provide),
  new WebpackErrorsPlugin({
    onErrors
  }),
  function (compiler) {
    compiler.hooks.done.tapPromise('WebpackAppPlusNVuePlugin', compilation => {
      return new Promise((resolve, reject) => {
        if (isFirst) {
          isFirst = false
        } else {
          if (process.env.NODE_ENV === 'development') {
            done(`Build complete. Watching for changes...`)
          } else {
            done(`Build complete. `)
          }
        }
        resolve()
      })
    })
  }
]

const excludeModuleReg = /node_modules(?!(\/|\\).*(weex).*)/

let isFirst = true

const rules = [{
  test: path.resolve(process.env.UNI_INPUT_DIR, 'main.js'),
  use: [{
    loader: '@dcloudio/vue-cli-plugin-hbuilderx/packages/webpack-uni-nvue-loader/lib/main'
  }]
}, {
  test: /\.js$/,
  use: [{
    loader: 'babel-loader',
    options: {
      babelrc: false
    }
  },
  jsPreprocessorLoader
  ],
  exclude: excludeModuleReg
},
{
  test: /\.nvue(\?[^?]+)?$/,
  use: [{
    loader: 'vue-loader',
    options: vueLoaderOptions
  }],
  exclude: excludeModuleReg
},
{
  test: /\.vue(\?[^?]+)?$/,
  use: [{
    loader: 'vue-loader',
    options: vueLoaderOptions
  }],
  exclude: excludeModuleReg
},
{
  test: /\.pug$/,
  oneOf: [{
    resourceQuery: /vue/,
    use: [{
      loader: 'pug-plain-loader'
    }]
  },
  {
    use: [{
      loader: 'raw-loader'
    }, {
      loader: 'pug-plain-loader'
    }]
  }
  ]
}
].concat(cssLoaders)

if (process.env.UNI_USING_NVUE_COMPILER) {
  rules.unshift({
    resourceQuery: function (query) {
      return query.indexOf('vue&type=template') !== -1 && query.indexOf('mpType=page') !== -1
    },
    use: [{
      loader: '@dcloudio/vue-cli-plugin-hbuilderx/packages/webpack-uni-nvue-loader/lib/template'
    }]
  })
}

module.exports = function (entry) {
  return {
    target: 'node', // 激活 vue-loader 的 isServer 逻辑
    mode: 'development', // process.env.NODE_ENV,
    devtool: process.env.NODE_ENV === 'development' ? 'inline-source-map' : false,
    watch: process.env.NODE_ENV === 'development',
    entry,
    output: {
      path: process.env.UNI_OUTPUT_DIR,
      filename: '[name].js',
      devtoolModuleFilenameTemplate
    },
    resolve: {
      extensions: ['.js', '.nvue', '.vue', '.json'],
      alias: {
        '@': process.env.UNI_INPUT_DIR
      },
      modules: [
        'node_modules',
        path.resolve(process.env.UNI_INPUT_DIR, 'node_modules')
      ]
    },
    resolveLoader: {
      alias: {
        'babel-loader': require.resolve('babel-loader')
      }
    },
    module: {
      rules
    },
    plugins,
    stats: {
      reasons: true,
      errorDetails: true
    },
    node: {
      global: false,
      Buffer: false,
      __filename: false,
      __dirname: false,
      setImmediate: false,
      clearImmediate: false,
      assert: false,
      buffer: false,
      child_process: false,
      cluster: false,
      console: false,
      constants: false,
      crypto: false,
      dgram: false,
      dns: false,
      domain: false,
      events: false,
      fs: false,
      http: false,
      https: false,
      module: false,
      net: false,
      os: false,
      path: false,
      process: false,
      punycode: false,
      querystring: false,
      readline: false,
      repl: false,
      stream: false,
      string_decoder: false,
      sys: false,
      timers: false,
      tls: false,
      tty: false,
      url: false,
      util: false,
      vm: false,
      zlib: false
    }
  }
}
