const fs = require('fs')
const path = require('path')

function cached(fn) {
	const cache = Object.create(null)
	return function cachedFn(str) {
		const hit = cache[str]
		return hit || (cache[str] = fn(str))
	}
}

const camelizeRE = /-(\w)/g

const camelize = cached(function(str) {
	return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '')
})

const capitalize = cached(function(str) {
	return str.charAt(0).toUpperCase() + str.slice(1)
})

const platformTags = ['audio', 'map', 'video', 'web-view', 'cover-view', 'cover-image']

function updateComponents(tags) {
	const importsStr = tags.map(tagName => {
		if (platformTags.indexOf(tagName) !== -1) {
			return `import ${capitalize(camelize(tagName))} from 'uni-platform/view/components/${tagName}'`
		}
		return `import ${capitalize(camelize(tagName))} from 'uni-view/components/${tagName}'`
	}).join('\n')

	const componentsStr = tags.map(tagName => {
		tagName = capitalize(camelize(tagName))
		return `${tagName}.name = 'VUni${tagName}'
     ${tagName}.mixins = ${tagName}.mixins ? [].concat(baseMixin, ${tagName}.mixins) : [baseMixin]        
     Vue.component(${tagName}.name,${tagName})`
	}).join('\n')

	const content = `
import Vue from 'vue'
import baseMixin from 'uni-mixins/base'
${importsStr}
${componentsStr}
`
	const dir = path.resolve(__dirname, '../../.tmp')

	if (!fs.existsSync(dir)) {
		fs.mkdirSync(dir)
	}

	fs.writeFileSync(path.resolve(dir, 'components.js'), content, 'utf8')

}
const {
	info,
	done,
} = require('@vue/cli-shared-utils')

class WebpackOptimizePlugin {
	apply(compiler) {
		let optimized = false
		compiler.hooks.beforeCompile.tapPromise('WebpackOptimizePlugin', compilation => {
			return new Promise((resolve, reject) => {
				if (!optimized) {
					updateComponents([])
				}
				resolve()
			})
		})
		compiler.hooks.done.tapPromise('WebpackOptimizePlugin', compilation => {
			return new Promise((resolve, reject) => {
				if (!optimized) {
					console.log()
					info(`Build optimizing...`)
					optimized = true
					updateComponents(Array.from(process.UNI_TAGS || []))
				} else {
					done(`Build complete.`)
					process.exit(0)
				}
				resolve()
			})
		})
	}
}

module.exports = WebpackOptimizePlugin
