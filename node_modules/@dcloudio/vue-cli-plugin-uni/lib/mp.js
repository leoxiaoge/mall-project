const path = require('path')
const webpack = require('webpack')

const moduleAlias = require('module-alias')
// TODO 重写 vue scoped(若升级 vue 编译器，需要确认该文件路径是否发生变化)
moduleAlias.addAlias('./stylePlugins/scoped', path.resolve(__dirname, './scoped.js'))

const {
  parseEntry,
  getMainEntry,
  getPlatformExts,
  getPlatformCompiler,
  getPlatformCssnano
} = require('@dcloudio/uni-cli-shared')

function createUniMPPlugin () {
  if (process.env.UNI_USING_COMPONENTS) {
    const WebpackUniMPPlugin = require('@dcloudio/webpack-uni-mp-loader/lib/plugin/index-new')
    return new WebpackUniMPPlugin()
  }
  const WebpackUniMPPlugin = require('@dcloudio/webpack-uni-mp-loader/lib/plugin')
  return new WebpackUniMPPlugin()
}

function getProvides () {
  const uniPath = require.resolve('@dcloudio/uni-' + process.env.UNI_PLATFORM)
  const provides = {
    'uni': [uniPath, 'default']
  }

  if (process.env.UNI_USING_COMPONENTS) {
    provides['createApp'] = [uniPath, 'createApp']
    provides['createPage'] = [uniPath, 'createPage']
    provides['createComponent'] = [uniPath, 'createComponent']
  }

  // TODO 目前依赖库 megalo 通过判断 wx 对象是否存在来识别平台做不同处理
  if (
    process.env.UNI_PLATFORM !== 'mp-qq' &&
        process.env.UNI_PLATFORM !== 'mp-weixin' &&
        process.env.UNI_PLATFORM !== 'app-plus'
  ) { // 非微信小程序，自动注入 wx 对象
    provides['wx'] = provides['uni']
  }
  return provides
}

module.exports = {
  vueConfig: {
    parallel: false
  },
  webpackConfig (webpackConfig) {
    // disable js cache-loader(保证编译器每次解析 script 节点代码读取 component 依赖，后续考虑 cache )
    const rules = webpackConfig.module.rules

    for (let i = rules.length - 1; i >= 0; i--) {
      const uses = rules[i].use
      if (Array.isArray(uses)) {
        if (uses.find(use => use.loader === 'babel-loader')) {
          const index = uses.findIndex(use => use.loader === 'cache-loader')
          uses.splice(index, 1)
        }
      }
    }

    if (!webpackConfig.optimization) {
      webpackConfig.optimization = {}
    }
    // disable noEmitOnErrors
    webpackConfig.optimization.noEmitOnErrors = false

    webpackConfig.optimization.runtimeChunk = {
      name: 'common/runtime'
    }

    if (process.env.UNI_USING_COMPONENTS) { // 防止 node_modules 内 vue 组件被 split
      webpackConfig.optimization.splitChunks = {
        chunks (chunk) {
          return chunk.name.indexOf('node-modules') !== 0
        },
        cacheGroups: {
          default: false,
          vendors: false,
          commons: {
            test (module) {
              if (module.type === 'css/mini-extract') {
                return false
              }
              if (module.resource && module.resource.indexOf('.vue') !== -1) {
                return false
              }
              return true
            },
            minChunks: 1,
            name: 'common/vendor',
            chunks: 'all'
          }
        }
      }
    } else {
      webpackConfig.optimization.splitChunks = {
        cacheGroups: {
          commons: {
            minChunks: 2,
            name: 'common/vendor',
            chunks: 'all'
          }
        }
      }
    }

    parseEntry()

    let devtool = false
    if (process.env.NODE_ENV !== 'production') {
      if (process.env.UNI_PLATFORM === 'app-plus') {
        if (process.env.UNI_USING_V8) {
          devtool = 'eval-source-map'
        } else {
          devtool = 'eval'
        }
      } else {
        devtool = 'sourcemap'
      }
    }

    return {
      devtool,
      mode: process.env.NODE_ENV,
      entry () {
        return process.UNI_ENTRY
      },
      output: {
        filename: '[name].js',
        chunkFilename: '[id].js',
        globalObject: process.env.UNI_PLATFORM === 'mp-alipay' ? 'my' : 'global',
        sourceMapFilename: '../.sourcemap/' + process.env.UNI_PLATFORM + '/[name].js.map'
      },
      resolve: {
        extensions: ['.nvue'],
        alias: { // 仅 mp-weixin
          'mpvue-page-factory': require.resolve(
            '@dcloudio/vue-cli-plugin-uni/packages/mpvue-page-factory')
        }
      },
      module: {
        rules: [{
          test: path.resolve(process.env.UNI_INPUT_DIR, getMainEntry()),
          use: [{
            loader: '@dcloudio/webpack-uni-mp-loader/lib/main'
          }]
        }, {
          resourceQuery: /vue&type=script/,
          use: [{
            loader: '@dcloudio/webpack-uni-mp-loader/lib/script'
          }]
        }, {
          resourceQuery: /vue&type=template/,
          use: [{
            loader: '@dcloudio/webpack-uni-mp-loader/lib/template'
          }]
        }]
      },
      plugins: [
        createUniMPPlugin(),
        new webpack.ProvidePlugin(getProvides())
      ]
    }
  },
  chainWebpack (webpackConfig) {
    // disable vue cache-loader
    webpackConfig.module
      .rule('vue')
      .test([/\.vue$/, /\.nvue$/])
      .use('vue-loader')
      .tap(options => Object.assign(options, {
        compiler: getPlatformCompiler(),
        compilerOptions: process.env.UNI_USING_COMPONENTS ? {
          preserveWhitespace: false
        } : require('./mp-compiler-options'),
        cacheDirectory: false,
        cacheIdentifier: false
      }))
      .end()
      .uses
      .delete('cache-loader')

    webpackConfig.plugin('extract-css')
      .init((Plugin, args) => new Plugin({
        filename: '[name]' + getPlatformExts().style
      }))

    if (process.env.NODE_ENV === 'production') {
      webpackConfig.plugin('optimize-css')
        .init((Plugin, args) => new Plugin({
          sourceMap: false,
          cssnanoOptions: {
            preset: [
              'default',
              getPlatformCssnano()
            ]
          }

        }))
    }

    webpackConfig.plugins.delete('hmr')
    webpackConfig.plugins.delete('html')
    webpackConfig.plugins.delete('copy')
    webpackConfig.plugins.delete('preload')
    webpackConfig.plugins.delete('prefetch')
  }
}
