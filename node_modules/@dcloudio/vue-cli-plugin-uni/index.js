const fs = require('fs')
const path = require('path')

const RuleSet = require('webpack/lib/RuleSet')

const CopyWebpackPlugin = require('copy-webpack-plugin')

const merge = require('webpack-merge')

// 初始化环境变量
const defaultInputDir = '../../../src'
const defaultOutputDir = '../../../dist/' + (process.env.NODE_ENV === 'production' ? 'build' : 'dev') + '/' + process.env
  .UNI_PLATFORM

if (process.env.UNI_INPUT_DIR && process.env.UNI_INPUT_DIR.indexOf('./') === 0) {
  process.env.UNI_INPUT_DIR = path.resolve(process.cwd(), process.env.UNI_INPUT_DIR)
}
if (process.env.UNI_OUTPUT_DIR && process.env.UNI_OUTPUT_DIR.indexOf('./') === 0) {
  process.env.UNI_OUTPUT_DIR = path.resolve(process.cwd(), process.env.UNI_OUTPUT_DIR)
}

process.env.UNI_PLATFORM = process.env.UNI_PLATFORM || 'h5'
process.env.VUE_APP_PLATFORM = process.env.UNI_PLATFORM
process.env.UNI_INPUT_DIR = process.env.UNI_INPUT_DIR || path.resolve(__dirname, defaultInputDir)
process.env.UNI_OUTPUT_DIR = process.env.UNI_OUTPUT_DIR || path.resolve(__dirname, defaultOutputDir)

if (process.env.UNI_PLATFORM === 'app-plus') {
  process.env.UNI_OUTPUT_TMP_DIR = path.resolve(process.env.UNI_OUTPUT_DIR, '../.tmp/app-plus')
}

process.env.UNI_CLI_CONTEXT = path.resolve(__dirname, '../../../')

process.UNI_LIBRARIES = process.UNI_LIBRARIES || ['@dcloudio/uni-ui']

const {
  runByHBuilderX, // 使用 HBuilderX 运行
  isInHBuilderX, // 在 HBuilderX 的插件中
  isInHBuilderXAlpha, // 在 HBuilderX Alpha的插件中
  hasModule,
  getMainEntry,
  getPlatforms,
  getPlatformVue,
  getShadowCss,
  getPlatformScss,
  getManifestJson,
  jsPreprocessOptions,
  cssPreprocessOptions,
  htmlPreprocessOptions
} = require('@dcloudio/uni-cli-shared')

const manifestJsonObj = getManifestJson()
const platformOptions = manifestJsonObj[process.env.UNI_PLATFORM] || {}

if (manifestJsonObj.debug) {
  process.env.VUE_APP_DEBUG = true
}

// fixed by hxy alpha 版默认启用新的框架
if (isInHBuilderXAlpha) {
  if (!platformOptions.hasOwnProperty('usingComponents')) {
    platformOptions.usingComponents = true
  }
}

if (process.env.UNI_PLATFORM === 'h5') {
  const optimization = platformOptions.optimization
  if (optimization) {
    // 发行模式且主动启用组件优化
    if (optimization.component && process.env.NODE_ENV === 'production') {
      process.env.UNI_OPT_COMPONENT = true
    }
    if (optimization.prefetch) {
      process.env.UNI_OPT_PREFETCH = true
    }
    if (optimization.preload) {
      process.env.UNI_OPT_PRELOAD = true
    }
  }
}
if (process.env.UNI_PLATFORM === 'mp-qq') { // QQ小程序 强制自定义组件模式
  platformOptions.usingComponents = true
}

let isNVueCompiler = false
if (process.env.UNI_PLATFORM === 'app-plus') {
  if (platformOptions.nvueCompiler === 'uni-app') {
    isNVueCompiler = true
  }
  if (platformOptions.usingNVues) {
    process.env.UNI_USING_NVUES = true
    process.env.UNI_USING_V8 = true
    process.env.UNI_OUTPUT_TMP_DIR = ''
  }
} else { // 其他平台，待确认配置方案
  if (
    manifestJsonObj['app-plus'] &&
    manifestJsonObj['app-plus']['nvueCompiler'] === 'uni-app'
  ) {
    isNVueCompiler = true
  }
}

if (isNVueCompiler) {
  process.env.UNI_USING_NVUE_COMPILER = true
}

if (platformOptions.usingComponents === true) {
  if (process.env.UNI_PLATFORM !== 'h5') {
    process.env.UNI_USING_COMPONENTS = true
  }
  if (process.env.UNI_PLATFORM === 'app-plus') {
    process.env.UNI_USING_V8 = true
  }
}

// 输出编译器版本等信息
if (process.env.UNI_PLATFORM !== 'h5') {
  try {
    const modeText = '当前项目编译模式：' +
      (platformOptions.usingComponents ? '自定义组件模式' : '非自定义组件模式') +
      '。编译模式差异见：https://ask.dcloud.net.cn/article/35843'

    let info = ''
    if (process.env.UNI_PLATFORM === 'app-plus') {
      const pagesPkg = require('@dcloudio/webpack-uni-pages-loader/package.json')
      if (pagesPkg) {
        info = '编译器版本：' + pagesPkg['uni-app']['compilerVersion']
      }
      const glob = require('glob')
      if (glob.sync('pages/**/*.nvue', {
        cwd: process.env.UNI_INPUT_DIR
      }).length) {
        console.log(info)
        console.log(modeText)

        console.log('当前nvue编译模式：' + (isNVueCompiler ? 'uni-app' : 'weex') +
          ' 。编译模式差异见：https://ask.dcloud.net.cn/article/36074')
      } else {
        console.log(info + '，' + modeText)
      }
    } else {
      console.log(modeText)
    }
  } catch (e) {}
}

const moduleAlias = require('module-alias')

// 将 template-compiler 指向修订后的版本
moduleAlias.addAlias('@megalo/template-compiler', '@dcloudio/vue-cli-plugin-uni/packages/@megalo/template-compiler')
moduleAlias.addAlias('mpvue-template-compiler', '@dcloudio/vue-cli-plugin-uni/packages/mpvue-template-compiler')

const initBuildCommand = require('./commands/build')
const initServeCommand = require('./commands/serve')

function resolve (dir) {
  return path.resolve(__dirname, './', dir)
}

const assetsDir = 'static'

if (runByHBuilderX) {
  const oldError = console.error
  console.error = function (msg) {
    if (typeof msg === 'string' && msg.includes(
      '[BABEL] Note: The code generator has deoptimised the styling of')) {
      const filePath = msg.replace('[BABEL] Note: The code generator has deoptimised the styling of ', '').split(
        ' as ')[0]
      console.log('[警告] `' + path.relative(process.env.UNI_INPUT_DIR, filePath) +
        '` 文件体积超过 500KB，已跳过压缩以及 ES6 转 ES5 的处理，手机端使用过大的js库影响性能。')
    } else {
      oldError.apply(console, arguments)
      // TODO 如果是首次运行遇到错误直接退出
    }
  }
}

function appendCopyWebpackPluginOptions (options, from, to, extra = {}) {
  if (fs.existsSync(from)) {
    options.push(Object.assign({
      from,
      to
    }, extra))
  }
}

function getCopyWebpackPluginOptions () {
  const ignore = []

  getPlatforms().forEach(platform => {
    if (process.env.UNI_PLATFORM !== platform) {
      ignore.push(platform + '/**/*')
    }
  })

  const options = []

  // static
  appendCopyWebpackPluginOptions(
    options,
    path.resolve(process.env.UNI_INPUT_DIR, 'static'),
    assetsDir, {
      ignore
    }
  )

  if (process.env.UNI_PLATFORM === 'mp-weixin') { // TODO 微信自定义 tabBar，后续可能 app-plus 也要支持
    const files = ['sitemap.json', 'ext.json', 'custom-tab-bar']
    if (platformOptions.workers) {
      files.push(platformOptions.workers)
    }
    files.forEach(file => {
      appendCopyWebpackPluginOptions(
        options,
        path.resolve(process.env.UNI_INPUT_DIR, file),
        path.resolve(process.env.UNI_OUTPUT_DIR, file)
      )
    })
  }

  if (
    (
      process.env.UNI_PLATFORM === 'mp-qq' ||
      process.env.UNI_PLATFORM === 'mp-weixin' ||
      process.env.UNI_PLATFORM === 'app-plus'
    ) &&
    !process.env.UNI_USING_NVUES
  ) {
    // 微信原生小程序组件
    appendCopyWebpackPluginOptions(
      options,
      path.resolve(process.env.UNI_INPUT_DIR, 'wxcomponents'),
      path.resolve(process.env.UNI_PLATFORM === 'app-plus' ? process.env.UNI_OUTPUT_TMP_DIR
        : process.env.UNI_OUTPUT_DIR, 'wxcomponents')
    )
  }

  if (process.env.UNI_PLATFORM === 'mp-baidu') {
    // 百度原生小程序组件
    appendCopyWebpackPluginOptions(
      options,
      path.resolve(process.env.UNI_INPUT_DIR, 'swancomponents'),
      path.resolve(process.env.UNI_OUTPUT_DIR, 'swancomponents')
    )
  }

  if (process.env.UNI_PLATFORM === 'mp-alipay') {
    // 支付宝原生小程序组件
    appendCopyWebpackPluginOptions(
      options,
      path.resolve(process.env.UNI_INPUT_DIR, 'mycomponents'),
      path.resolve(process.env.UNI_OUTPUT_DIR, 'mycomponents')
    )
  }

  if (process.env.UNI_PLATFORM === 'mp-toutiao') {
    // 头条原生小程序组件
    appendCopyWebpackPluginOptions(
      options,
      path.resolve(process.env.UNI_INPUT_DIR, 'ttcomponents'),
      path.resolve(process.env.UNI_OUTPUT_DIR, 'ttcomponents')
    )
  }

  if (process.env.UNI_PLATFORM === 'h5') {
    appendCopyWebpackPluginOptions(
      options,
      require.resolve('@dcloudio/uni-h5/dist/index.css'),
      assetsDir, {
        transform (content) {
          if (process.env.NODE_ENV === 'production') {
            return content + getShadowCss()
          }
          return content
        }
      }
    )
  }

  if (process.env.UNI_PLATFORM === 'h5' || process.env.UNI_PLATFORM === 'app-plus') {
    appendCopyWebpackPluginOptions(
      options,
      path.resolve(process.env.UNI_INPUT_DIR, './hybrid/html'),
      path.resolve(process.env.UNI_OUTPUT_DIR, 'hybrid/html')
    )
  }
  return options
}

function createMatcher (fakeFile) {
  return (rule, i) => {
    const clone = Object.assign({}, rule)
    delete clone.include
    const normalized = RuleSet.normalizeRule(clone, {}, '')
    return (
      !rule.enforce &&
      normalized.resource &&
      normalized.resource(fakeFile)
    )
  }
}

function updateJsLoader (rawRules, fakeFile, checkLoaderRegex, loader) {
  const matchRule = rawRules.find(createMatcher(fakeFile))

  const matchUse = matchRule.use

  const matchLoaderUseIndex = matchUse.findIndex(u => {
    return checkLoaderRegex.test(u.loader)
  })

  if (matchLoaderUseIndex < 0) {
    throw new Error(`No matching use for ${fakeFile}`)
  }

  matchUse.push(loader)
}

const userTsConfigJson = path.resolve(process.env.UNI_INPUT_DIR, 'tsconfig.json')
const defaultTsConfigJson = path.resolve(process.env.UNI_CLI_CONTEXT, 'tsconfig.json')

const tsConfigJsonFile = fs.existsSync(userTsConfigJson) ? userTsConfigJson : defaultTsConfigJson

function resolveModule (dir) {
  return path.resolve(__dirname, '../..', dir)
}

const tsLoaderOptions = {
  context: process.env.UNI_INPUT_DIR,
  configFile: tsConfigJsonFile,
  transpileOnly: false,
  compilerOptions: {
    baseUrl: process.env.UNI_INPUT_DIR,
    typeRoots: [resolveModule('@dcloudio/types'), resolveModule('@types')],
    types: [
      'uni-app',
      'webpack-env'
    ],
    paths: {
      '@/*': [
        path.join(process.env.UNI_INPUT_DIR, '*')
      ],
      'vue': [
        resolveModule('vue')
      ],
      'vuex': [
        resolveModule('vuex')
      ],
      'vue-class-component': [
        resolveModule('vue-class-component')
      ],
      'vue-property-decorator': [
        resolveModule('vue-property-decorator')
      ],
      'tslib': [
        resolveModule('tslib')
      ],
      'mpvue-page-factory': [
        resolveModule('@dcloudio/vue-cli-plugin-uni/packages/mpvue-page-factory')
      ]
    }
  },
  errorFormatter (error, colors) {
    const messageColor = error.severity === 'warning' ? colors.bold.yellow : colors.bold.red
    const filePath = path.relative(process.env.UNI_INPUT_DIR, error.file).replace('.vue.ts', '.vue')
    if (error.code === 2307 && error.content.includes('.vue')) {
      error.content = error.content.replace('Cannot find module ', '') +
        ` script 节点必须使用 lang="ts",文档参考地址:https://uniapp.dcloud.io/frame?id=vue-ts`
    }
    return messageColor(
      `[tsl] ERROR at ${filePath}:${error.line}
TS${error.code}:${error.content}`
    )
  }
}

function updateTsLoader (rawRules, fakeFile, loader) {
  const matchRule = rawRules.find(createMatcher(fakeFile))
  if (matchRule && matchRule.use) {
    if (runByHBuilderX) {
      matchRule.use.forEach(matchUse => {
        if (matchUse.loader === 'ts-loader') {
          Object.assign(matchUse.options, tsLoaderOptions)
        }
      })
    }
    matchRule.use.push(loader)
  }
}

function removeForkTsCheckerWebpackPlugin (rawPlugins) {
  if (isInHBuilderX && hasModule('fork-ts-checker-webpack-plugin')) {
    const pluginIndex = rawPlugins.findIndex(rawPlugin => rawPlugin.vue && rawPlugin.typescriptVersion)
    if (pluginIndex !== -1) { // 移除fork-ts-checker-webpack-plugin
      rawPlugins.splice(pluginIndex, 1)
    }
  }
}

module.exports = (api, options) => {
  initServeCommand(api, options)

  initBuildCommand(api, options)

  const platformOptions = require('./lib/' + process.env.UNI_PLATFORM)

  Object.assign(options, {
    outputDir: process.env.UNI_OUTPUT_TMP_DIR || process.env.UNI_OUTPUT_DIR,
    assetsDir
  }, platformOptions.vueConfig)

  if (!options.transpileDependencies) {
    options.transpileDependencies = []
  }
  // 增加 src/node_modules 解析
  options.transpileDependencies.push(path.resolve(process.env.UNI_INPUT_DIR, 'node_modules'))
  options.transpileDependencies.push('@dcloudio/uni-' + process.env.UNI_PLATFORM)

  if (process.env.UNI_PLATFORM === 'h5') { // h5 dev 用到了这两个，需要 babel
    options.transpileDependencies.push('ansi-regex')
    options.transpileDependencies.push('strip-ansi')
  }

  if (!options.css) {
    options.css = {}
  }

  if (process.env.UNI_PLATFORM === 'h5') {
    options.css.extract = false
  } else {
    options.css.extract = true
  }

  if (!options.css.loaderOptions) {
    options.css.loaderOptions = {}
  }
  if (!options.css.loaderOptions.postcss) {
    options.css.loaderOptions.postcss = {}
  }
  if (!options.css.loaderOptions.sass) {
    options.css.loaderOptions.sass = {}
  }

  if (!options.css.loaderOptions.postcss.config) {
    options.css.loaderOptions.postcss.config = {}
  }

  // sass 全局变量
  options.css.loaderOptions.sass.data = getPlatformScss()
  if (fs.existsSync(path.resolve(process.env.UNI_INPUT_DIR, 'uni.scss'))) {
    options.css.loaderOptions.sass.data = `${getPlatformScss()}
@import "@/uni.scss";`
  }

  options.css.loaderOptions.postcss.config.path = resolve('../../../postcss.config.js')

  api.configureWebpack(webpackConfig => {
    const rawRules = webpackConfig.module.rules

    // js preprocess
    updateJsLoader(rawRules, 'foo.js', /^babel-loader/, {
      loader: resolve('packages/webpack-preprocess-loader'),
      options: jsPreprocessOptions
    })
    // ts options and preprocess
    updateTsLoader(rawRules, 'foo.ts', {
      loader: resolve('packages/webpack-preprocess-loader'),
      options: jsPreprocessOptions
    })
    updateTsLoader(rawRules, 'foo.tsx', {
      loader: resolve('packages/webpack-preprocess-loader'),
      options: jsPreprocessOptions
    })
    // 如果在 HBuilderX 中
    removeForkTsCheckerWebpackPlugin(webpackConfig.plugins)

    let platformWebpackConfig = platformOptions.webpackConfig
    if (typeof platformWebpackConfig === 'function') {
      platformWebpackConfig = platformWebpackConfig(webpackConfig)
    }
    // 移除 node_modules 目录，避免受路径上的 node_modules 影响
    webpackConfig.resolve.modules = webpackConfig.resolve.modules.filter(module => module !==
      'node_modules')

    const plugins = [
      new CopyWebpackPlugin(getCopyWebpackPluginOptions())
    ]

    if (runByHBuilderX) { // 使用 HBuilderX 中运行时，调整错误日志输出
      const WebpackErrorsPlugin = require('./packages/webpack-errors-plugin')
      const onErrors = require('./util/on-errors')
      plugins.push(new WebpackErrorsPlugin({
        onErrors
      }))
    }

    const rules = [{
      test: path.resolve(process.env.UNI_INPUT_DIR, 'pages.json'),
      use: [{
        loader: 'babel-loader'
      }, {
        loader: '@dcloudio/webpack-uni-pages-loader'
      }],
      type: 'javascript/auto'
    },
    {
      test: path.resolve(process.env.UNI_INPUT_DIR, getMainEntry()),
      // resourceQuery: /type=wrapper/,
      use: [{
        loader: 'wrap-loader',
        options: {
          before: [
            process.env.UNI_PLATFORM === 'h5'
              ? `import '@babel/polyfill';import 'uni-pages';import 'uni-${process.env.UNI_PLATFORM}';`
              : `import 'uni-pages';`
          ]
        }
      }]
    },
    {
      resourceQuery: /vue&type=template/,
      use: [{
        loader: resolve('packages/webpack-preprocess-loader'),
        options: htmlPreprocessOptions
      }]
    }
    ]

    if (!process.env.UNI_USING_COMPONENTS) { // 新版本，在 script-loader 中处理（为了避免 babel generator 移除部分条件编译代码）
      rules.push({
        resourceQuery: /vue&type=script/,
        use: [{
          loader: resolve('packages/webpack-preprocess-loader'),
          options: jsPreprocessOptions
        }]
      })
    }

    return merge({
      resolve: {
        alias: {
          '@': path.resolve(process.env.UNI_INPUT_DIR),
          'vue$': getPlatformVue(),
          'uni-pages': path.resolve(process.env.UNI_INPUT_DIR, 'pages.json')
        },
        modules: [
          process.env.UNI_INPUT_DIR,
          path.resolve(process.env.UNI_INPUT_DIR, 'node_modules')
        ]
      },
      module: {
        noParse: /^(vue|vue-router|vuex|vuex-router-sync)$/,
        rules
      },
      plugins,
      performance: {
        assetFilter (assetFilename) {
          return !(/\.map$/.test(assetFilename)) && !(/vendor/.test(assetFilename))
        }
      }
    }, platformWebpackConfig)
  })
  api.chainWebpack(webpackConfig => {
    // 处理静态资源 limit
    webpackConfig.module
      .rule('images')
      .use('url-loader')
      .loader('url-loader')
      .tap(options => Object.assign(options, {
        limit: 40960
      }))

    webpackConfig.module
      .rule('fonts')
      .use('url-loader')
      .loader('url-loader')
      .tap(options => Object.assign(options, {
        limit: 40960
      }))
    // 条件编译 vue 文件统一直接过滤html,js,css三种类型,单独资源文件引用各自过滤

    const loaders = {
      'scss': 'sass-loader',
      'sass': 'sass-loader',
      'less': 'less-loader',
      'stylus': 'stylus-loader'
    }
    // 独立css,postcss,scss,sass,less,stylus
    const cssLang = ['css', 'postcss', 'scss', 'sass', 'less', 'stylus']

    const cssTypes = ['vue-modules', 'vue', 'normal-modules', 'normal']

    cssLang.forEach(lang => {
      const langRule = webpackConfig.module.rule(lang)
      const loader = loaders[lang]
      cssTypes.forEach(type => {
        langRule.oneOf(type)
          .use(`uniapp-preprocss`)
          .loader(resolve('packages/webpack-preprocess-loader'))
          .options(cssPreprocessOptions)
          .before('css-loader') // 在 css-loader 之后条件编译一次，避免 import 进来的 css 没有走条件编译
        if (loader) { // 在 scss,less,stylus 之前先条件编译一次
          langRule.oneOf(type)
            .use(`uniapp-preprocss-` + lang)
            .loader(resolve('packages/webpack-preprocess-loader'))
            .options(cssPreprocessOptions)
            .after(loader)
        }
      })
    })

    platformOptions.chainWebpack(webpackConfig)
    // define
    webpackConfig
      .plugin('uni-define')
      .use(require.resolve('webpack/lib/DefinePlugin'), [{
        'process.env.UNI_ENV': JSON.stringify(process.env.UNI_PLATFORM)
      }])

    if (runByHBuilderX) { // 由 HBuilderX 运行时，移除进度，错误
      webpackConfig.plugins.delete('progress')
      webpackConfig.plugins.delete('friendly-errors')
    }
  })
}

module.exports.defaultModes = {
  serve: 'development',
  build: 'production'
}
